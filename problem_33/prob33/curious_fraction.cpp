//prints the two digit curious fractions below 1
#include<iostream>
#include<vector>
#include "rational.h"

using namespace std;

int common_digit(int,int);
vector<int> digits(int);

int main()
{
  for(int i=11;i<99;++i)
  {
    for(int j=(i+1);j<100;++j)
    {
      Rational no(i,j);
      if( i%10 != 0 && j%10 != 0 && common_digit(no.get_denominator(),no.get_numerator()) != 0 )
      {
        int t_comm_digit = common_digit(no.get_numerator(),no.get_denominator());
        int t_num,t_denom;
        //determine the fraction generated by the unorthodox cancellation
        //first the denominator
        if( no.get_denominator()%10 == t_comm_digit)
        {
          t_denom = no.get_denominator() / 10;
        }
        else
        {
          t_denom = no.get_denominator() % 10;
        }
        //now the numerator
        if( no.get_numerator()%10 == t_comm_digit)
        {
          t_num = no.get_numerator() / 10;
        }
        else
        {
          t_num = no.get_numerator() % 10;
        }
        //finally to test if the fraction is indeed curious
        Rational cancelled_fraction(t_num,t_denom);
        if( no.simplify() == cancelled_fraction.simplify() )
        {
          cout<<cancelled_fraction<<"\t"<<no<<endl;
        }
      }
    }
  }
  return 0;
}

//only needs to handle two digit no's but we'll deal with one that can deal with longer
int common_digit(int a,int b)
{
  vector<int> a_digits,b_digits;
  a_digits = digits(a);
  b_digits = digits(b);
  vector<int>::iterator vi,vj;
  for(vi = a_digits.begin(); vi != a_digits.end(); ++vi)
  {
    for(vj = b_digits.begin(); vj != b_digits.end(); ++vj)
    {
      int t_test = *vi;
      if( t_test == *vj )
      {
        return *vi;
      }
    }
  }
  return 0;
}

//to split an integer into a vector of its digits
vector<int> digits(int num)
{
  vector<int> result;
  while(num>0)
  {
    result.push_back(num%10);
    num /= 10;
  }
  return result;
}
